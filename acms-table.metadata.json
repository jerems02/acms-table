{"__symbolic":"module","version":3,"metadata":{"AcmsTableModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule"},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule"},{"__symbolic":"reference","module":"ng2-translate","name":"TranslateModule"},{"__symbolic":"reference","module":"acms-switch","name":"AcmsSwitchModule"}],"declarations":[{"__symbolic":"reference","name":"AcmsTableComponent"},{"__symbolic":"reference","name":"ɵa"}],"exports":[{"__symbolic":"reference","name":"AcmsTableComponent"},{"__symbolic":"reference","name":"ɵa"}]}]}],"members":{},"statics":{"forRoot":{"__symbolic":"function","parameters":[],"value":{"ngModule":{"__symbolic":"reference","name":"AcmsTableModule"},"providers":[]}}}},"AcmsTableComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acms-table","template":"<div *ngIf=\"config.global.search\"  class=\"tableSearchBox\" (keyup)=\"searchWithTerms($event, searchBox)\" > <span>{{ (config.global.isSearchLabelTranslatable) ? (config.global.searchLabel | translate) : (config.global.searchLabel) }}</span> <input type=\"text\" #searchBox placeholder=\"{{ (config.global.isPlaceHolderSearchTranslatable) ? (config.global.placeHolderSearch  | translate) : (config.global.placeHolderSearch) }}\" /> </div> <div *ngIf=\"config.global.group_actions && config.global.group_actions.length > 0\" class=\"tableGroupActions\"> <acms-switch [id]=\"main\" (switchEvent)=\"selectDeselectAll($event)\" id=\"main-switch\"></acms-switch> <select (change)=\"selectGlobalAction($event)\"> <option disabled select>Group Action</option> <option *ngFor=\"let action of config.global.group_actions\">{{ action }}</option> </select> </div> <table *ngIf=\"!isEmptyTable\"> <thead *ngIf=\"config.global.showHeaders\"> <tr> <ng-template ngFor let-header [ngForOf]=\"headers\" let-i=\"index\"> <th *ngIf=\"showColumn(header.hideWithResponsiveView)\"> {{ (header.is_translatable) ? (header.title  | translate) : (header.title) }} <span class=\"sortArrow\" *ngIf=\"header.is_sortable\"> <span class=\"sortArrowUp\" (click)=\"sort(i, 'ASC')\"> &#x25B2; </span> <span class=\"sortArrowDown\" (click)=\"sort(i, 'DESC')\"> &#x25BC; </span> </span> </th> </ng-template> </thead> <tbody> <tr *ngFor=\"let result of displayedResults\" (click)=\"(config.global.isEventOnRow) ? sendEvent($event,'onRow', result.id) : ''\"> <ng-template ngFor let-item [ngForOf]=\"result.items\"> <td *ngIf=\"item.actions && item.actions.length > 0\"> <ng-template ngFor let-action [ngForOf]=\"item.actions\"> <span *ngIf=\"action === 'select'\" class=\"actions action-select\"><span> <acms-switch [id]=\"result.id\" (switchEvent)=\"updateSelectedRowsList($event)\" class=\"item-switch\" (click)=\"stopPropagation($event)\"></acms-switch> </span></span> <span *ngIf=\"action === 'update'\" class=\"actions action-update\" (click)=\"sendEvent($event, 'update', result.id)\"><span>UPDATE</span></span> <span *ngIf=\"action === 'delete'\" class=\"actions action-delete\" (click)=\"sendEvent($event, 'delete', result.id)\"><span>DELETE</span></span> </ng-template> </td> <td *ngIf=\"!item.actions && showColumn(item.isResponsive)\" [ngClass]=\"item.classRow\"> <acms-data [cell]=\"item\"></acms-data> <ng-template ngFor let-subrow [ngForOf]=\"item.multirows\"> <acms-data [cell]=\"subrow\"></acms-data> </ng-template> </td> </ng-template> </tr> </tbody> <caption *ngIf=\"config.global.legend\"> {{ (config.global.isLegendTranslatable) ? (config.global.legend | translate) : (config.global.legend) }} </caption> </table> <div class=\"tablePagination\" *ngIf=\"config.global.pagination && !isEmptyTable\"> <span *ngFor=\"let page of collectionPage\" [ngClass]=\"(page.current)?'currentLinkPagination':''\"> <a href=\"#\" (click)=\"changePage(page.number)\">{{ page.name }}</a> </span> </div> <div id=\"acms-table-empty-message\" *ngIf=\"isEmptyTable\"> <div>{{ (config.global.isMessageIfEmptyTableTranslatable) ? (config.global.messageIfEmptyTable | translate) : (config.global.messageIfEmptyTable) }}</div> </div> ","styles":[".currentLinkPagination a { font-weight: bold; } .actions { position: relative; top: -2px; } .action-update, .action-delete { display: inline-block; min-width: 16px ; height: 15px; margin-left: 10px; cursor: pointer; } /* .action-update span, .action-delete span { display: none; } .action-update:before { font-family: 'FontAwesome'; left: 0px; position: absolute; top: 2px; content: '\f040'; } .action-delete:before { font-family: 'FontAwesome'; left:0px; position: absolute; top: 2px; content: '\f1f8'; }*/ .multi-rows { display: flex; flex-direction: column; } acms-switch { position: relative; top: 4px; } "]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"},{"__symbolic":"reference","module":"@angular/platform-browser","name":"DomSanitizer"}]}],"config":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"collection":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"rowSelected":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"emptyTableEvt":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"reinit":[{"__symbolic":"method"}],"findTargetThroughObject":[{"__symbolic":"method"}],"prepareOneCell":[{"__symbolic":"method"}],"prepareTable":[{"__symbolic":"method"}],"applyFilter":[{"__symbolic":"method"}],"isEmpty":[{"__symbolic":"method"}],"applyPagination":[{"__symbolic":"method"}],"changePage":[{"__symbolic":"method"}],"isNumeric":[{"__symbolic":"method"}],"sort":[{"__symbolic":"method"}],"searchWithTerms":[{"__symbolic":"method"}],"addResizeEvent":[{"__symbolic":"method"}],"showColumn":[{"__symbolic":"method"}],"selectGlobalAction":[{"__symbolic":"method"}],"sendEvent":[{"__symbolic":"method"}],"updateSelectedRowsList":[{"__symbolic":"method"}],"resetMainSwitch":[{"__symbolic":"method"}],"deselectAll":[{"__symbolic":"method"}],"selectDeselectAll":[{"__symbolic":"method"}],"stopPropagation":[{"__symbolic":"method"}]}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acms-data","template":"<ng-container [ngSwitch]=\"cell.type\" > <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.data\"> </div> <div *ngSwitchCase=\"'img'\"> <img *ngIf=\"!cell.config.method && !cell.config.url\" [src]=\"cell.data\" [attr.height]=\"cell.config.height\" [attr.width]=\"cell.config.width\" /> <a class=\"imgClick\" *ngIf=\"cell.config.method && !cell.config.url\" (click)=\"genericClickMethod($event, cell.config.method, cell.config.params, cell.config.context, cell.contextRow)\" ><img [src]=\"cell.data\" [attr.height]=\"cell.config.height\" [attr.width]=\"cell.config.width\" /></a> <a class=\"imgURL\" *ngIf=\"!cell.config.method && cell.config.url\" [attr.href]=\"cell.config.url\" [attr.target]=\"cell.config.target\"><img [src]=\"cell.data\" [attr.height]=\"cell.config.height\" [attr.width]=\"cell.config.width\" /></a> </div> <div *ngSwitchCase=\"'svg'\"> <span *ngIf=\"!cell.config.method && !cell.config.url\" [innerHTML]=\"cell.data\"></span> <a class=\"svgClick\" *ngIf=\"cell.config.method && !cell.config.url\" (click)=\"genericClickMethod($event, cell.config.method, cell.config.params, cell.config.context, cell.contextRow)\" ><span [innerHTML]=\"cell.data\"></span></a> <a class=\"svgURL\" *ngIf=\"!cell.config.method && cell.config.url\" [attr.href]=\"cell.config.url\" [attr.target]=\"cell.config.target\"><span [innerHTML]=\"cell.data\"></span></a> </div> <div *ngSwitchCase=\"'url'\"> <a (click)=\"stopPropagation($event)\" [attr.href]=\"(cell.config.prefix) ? (cell.config.prefix+cell.data) : cell.data\" [attr.title]=\"cell.config.title\" [attr.target]=\"cell.config.target\">{{ (cell.config.content) ? ( ( cell.config.isContentTranslatable ) ? (cell.config.content | translate) : cell.config.content ) : ( (cell.config.prefix) ? (cell.config.prefix+cell.data) : cell.data ) }}</a> </div> <div *ngSwitchCase=\"'function'\"> <a *ngIf=\"!cell.isTranslatable\" class=\"functionClick\" (click)=\"genericClickMethod($event, cell.config.method, cell.config.params, cell.config.context, cell.contextRow)\" >{{ cell.data }}</a> <a *ngIf=\"cell.isTranslatable\" class=\"functionClick\" (click)=\"genericClickMethod($event, cell.config.method, cell.config.params, cell.config.context, cell.contextRow)\" >{{ cell.data | translate }}</a> </div> <div *ngSwitchDefault> {{ (cell.isTranslatable) ? (cell.data | translate) : cell.data }} </div> </ng-container>","styles":[""]}]}],"members":{"cell":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor"}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"stopPropagation":[{"__symbolic":"method"}],"genericClickMethod":[{"__symbolic":"method"}]}}},"origins":{"AcmsTableModule":"./index","AcmsTableComponent":"./acms-table.component","ɵa":"./data/acms-data.component"},"importAs":"acms-table"}